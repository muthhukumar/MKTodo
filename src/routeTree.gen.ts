/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as StandaloneImport } from './routes/_standalone'
import { Route as AuthImport } from './routes/_auth'
import { Route as AuthIndexImport } from './routes/_auth.index'
import { Route as StandaloneSettingsImport } from './routes/_standalone.settings'
import { Route as StandaloneSearchImport } from './routes/_standalone.search'
import { Route as StandaloneLogsImport } from './routes/_standalone.logs'
import { Route as StandaloneSearchTaskIdImport } from './routes/_standalone.search.$taskId'
import { Route as AuthTasksTaskTypeImport } from './routes/_auth.tasks.$taskType'
import { Route as AuthTasksTaskTypeTaskIdImport } from './routes/_auth.tasks.$taskType.$taskId'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const StandaloneRoute = StandaloneImport.update({
  id: '/_standalone',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)

const StandaloneSettingsRoute = StandaloneSettingsImport.update({
  path: '/settings',
  getParentRoute: () => StandaloneRoute,
} as any)

const StandaloneSearchRoute = StandaloneSearchImport.update({
  path: '/search',
  getParentRoute: () => StandaloneRoute,
} as any)

const StandaloneLogsRoute = StandaloneLogsImport.update({
  path: '/logs',
  getParentRoute: () => StandaloneRoute,
} as any)

const StandaloneSearchTaskIdRoute = StandaloneSearchTaskIdImport.update({
  path: '/$taskId',
  getParentRoute: () => StandaloneSearchRoute,
} as any)

const AuthTasksTaskTypeRoute = AuthTasksTaskTypeImport.update({
  path: '/tasks/$taskType',
  getParentRoute: () => AuthRoute,
} as any)

const AuthTasksTaskTypeTaskIdRoute = AuthTasksTaskTypeTaskIdImport.update({
  path: '/$taskId',
  getParentRoute: () => AuthTasksTaskTypeRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_standalone': {
      id: '/_standalone'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof StandaloneImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_standalone/logs': {
      id: '/_standalone/logs'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof StandaloneLogsImport
      parentRoute: typeof StandaloneImport
    }
    '/_standalone/search': {
      id: '/_standalone/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof StandaloneSearchImport
      parentRoute: typeof StandaloneImport
    }
    '/_standalone/settings': {
      id: '/_standalone/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof StandaloneSettingsImport
      parentRoute: typeof StandaloneImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthImport
    }
    '/_auth/tasks/$taskType': {
      id: '/_auth/tasks/$taskType'
      path: '/tasks/$taskType'
      fullPath: '/tasks/$taskType'
      preLoaderRoute: typeof AuthTasksTaskTypeImport
      parentRoute: typeof AuthImport
    }
    '/_standalone/search/$taskId': {
      id: '/_standalone/search/$taskId'
      path: '/$taskId'
      fullPath: '/search/$taskId'
      preLoaderRoute: typeof StandaloneSearchTaskIdImport
      parentRoute: typeof StandaloneSearchImport
    }
    '/_auth/tasks/$taskType/$taskId': {
      id: '/_auth/tasks/$taskType/$taskId'
      path: '/$taskId'
      fullPath: '/tasks/$taskType/$taskId'
      preLoaderRoute: typeof AuthTasksTaskTypeTaskIdImport
      parentRoute: typeof AuthTasksTaskTypeImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  AuthRoute: AuthRoute.addChildren({
    AuthIndexRoute,
    AuthTasksTaskTypeRoute: AuthTasksTaskTypeRoute.addChildren({
      AuthTasksTaskTypeTaskIdRoute,
    }),
  }),
  StandaloneRoute: StandaloneRoute.addChildren({
    StandaloneLogsRoute,
    StandaloneSearchRoute: StandaloneSearchRoute.addChildren({
      StandaloneSearchTaskIdRoute,
    }),
    StandaloneSettingsRoute,
  }),
  LoginRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_standalone",
        "/login"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/",
        "/_auth/tasks/$taskType"
      ]
    },
    "/_standalone": {
      "filePath": "_standalone.tsx",
      "children": [
        "/_standalone/logs",
        "/_standalone/search",
        "/_standalone/settings"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_standalone/logs": {
      "filePath": "_standalone.logs.tsx",
      "parent": "/_standalone"
    },
    "/_standalone/search": {
      "filePath": "_standalone.search.tsx",
      "parent": "/_standalone",
      "children": [
        "/_standalone/search/$taskId"
      ]
    },
    "/_standalone/settings": {
      "filePath": "_standalone.settings.tsx",
      "parent": "/_standalone"
    },
    "/_auth/": {
      "filePath": "_auth.index.tsx",
      "parent": "/_auth"
    },
    "/_auth/tasks/$taskType": {
      "filePath": "_auth.tasks.$taskType.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/tasks/$taskType/$taskId"
      ]
    },
    "/_standalone/search/$taskId": {
      "filePath": "_standalone.search.$taskId.tsx",
      "parent": "/_standalone/search"
    },
    "/_auth/tasks/$taskType/$taskId": {
      "filePath": "_auth.tasks.$taskType.$taskId.tsx",
      "parent": "/_auth/tasks/$taskType"
    }
  }
}
ROUTE_MANIFEST_END */
